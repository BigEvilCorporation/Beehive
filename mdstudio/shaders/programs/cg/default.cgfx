
//Samplers
sampler2D gDiffuseTexture;

//Lighting
float4 gDiffuseColour = float4(1.0f, 1.0f, 1.0f, 1.0f);
float3 gDirectionalLightDir = float3(1.0f, 1.0f, 1.0f);
float3 gDirectionalLightColour = float3(1.0f, 1.0f, 1.0f);
float3 gAmbientLightColour = float3(0.3f, 0.3f, 0.3f);

//Matrices
float4x4 gWorldMatrix;
float4x4 gWorldViewProjectionMatrix;

struct InputV
{
	float4 mPosition	: POSITION;
	float2 mTexCoord	: TEXCOORD0;
	float4 mColour		: COLOR;
	float3 mNormal		: NORMAL;
};

struct OutputV
{
	float4 mPosition	: POSITION;
	float2 mTexCoord	: TEXCOORD0;
	float4 mColour		: COLOR;
	float3 mNormal		: TEXCOORD1;
};

OutputV VertexProgram(InputV input)
{
	OutputV output;

	output.mPosition = mul(gWorldViewProjectionMatrix, input.mPosition);
	output.mTexCoord = input.mTexCoord;
	output.mColour = gDiffuseColour;
	output.mNormal = normalize(mul(gWorldMatrix, float4(input.mNormal, 1.0f)));

	return output;
}

float4 FragmentProgram(OutputV input) : COLOR
{
	//Ambient light
	float4 ambient = float4(gAmbientLightColour, 1.0f);

	//Texture colour
	float4 diffuse = input.mColour * tex2D(gDiffuseTexture, input.mTexCoord);

	//Directional light
	float4 light = float4(gDirectionalLightColour, 1.0f) * max(dot(input.mNormal, gDirectionalLightDir), 0.0f);

	float4 outputColour = (ambient * diffuse) + diffuse * light;

	return outputColour;
};
