IncludeModule c ;

VALID_CONFIGS ?= release releaseltcg debug ;

CONFIG ?= $(VALID_CONFIGS[1]) ;

switch $(OS)
{
	case NT :
#		VALID_PLATFORMS ?= win32 win64 ;
		VALID_PLATFORMS ?= win32 ;

	case MACOSX :
#		VALID_PLATFORMS ?= macosx iphone iphonesimulator ;
		VALID_PLATFORMS ?= macosx32 macosx64 ;

	case LINUX :
		VALID_PLATFORMS ?= linux32 ;

		PLATFORM ?= linux32 ;
}

if $(PLATFORM) = "" { PLATFORM = ; }
PLATFORM ?= $(VALID_PLATFORMS[1]) ;

#if ! $(CONFIG) in * $(VALID_CONFIGS)
#{
#	Exit "* jam: CONFIG must be one of the following:" $(VALID_CONFIGS:J=$(SPACE)) ;
#}

#if ! $(PLATFORM) in * $(VALID_PLATFORMS)
#{
#	Exit "* jam: PLATFORM must be one of the following:" $(VALID_PLATFORMS:J=$(SPACE)) ;
#}

rule C.ToolChain THE_COMPILER : THE_PLATFORM : THE_CONFIG
{
	THE_COMPILER ?= $(COMPILER.$(PLATFORM)) ;
	THE_PLATFORM ?= $(PLATFORM) ;
	THE_CONFIG ?= $(CONFIG) ;

	if $(THE_COMPILER)
	{
		COMPILER.$(THE_PLATFORM) = $(THE_COMPILER) ;
	}

	if $(THE_PLATFORM) != * {
		if $(THE_CONFIG) != * {
			IncludeModule c-compilers/global-$(THE_CONFIG) : optional ;
		}
		IncludeModule c-compilers/$(THE_PLATFORM)-autodetect ;
		if [ C.AutoDetect ] {
			return ;
		}

		echo "warning: No supported C build platform found on this computer." ;
	}
}

if ! $(COMPILER.$(PLATFORM))  &&  $(COMPILER) {
	COMPILER.$(PLATFORM) = $(COMPILER) ;
}

C.ToolChain $(COMPILER.$(PLATFORM)) : $(PLATFORM) : $(CONFIG) ;

########################################################################
########################################################################

rule ActiveProject PROJECT
{
	ACTIVE_PROJECT = $(PROJECT) ;
}


