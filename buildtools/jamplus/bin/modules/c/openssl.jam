rule C.UseOpenSSL TARGET : OPTIONS {
	if $(NT) {
		local bits = 32 ;
		if $(PLATFORM) = win64 {
			bits = 64 ;
		}

		if ! $(OPENSSL$(bits)_ROOT) {
			local PATHS =
				"$(OPENSSL_ROOT_DIR:J=$(SPACE))/"
				c:/
				d:/
				e:/
			;

			local PATH_SUFFIXES =
				OpenSSL-Win$(bits)
			;

			local ssl.h = [ Glob $(PATHS)$(PATH_SUFFIXES)/include/openssl : ssl.h ] ;
			if $(ssl.h) {
				OPENSSL$(bits)_ROOT = [ Match (.+)/include/openssl/ : $(ssl.h[1]) ] ;
			} else {
				OPENSSL$(bits)_ROOT = _ ;
			}
		}

		if $(OPENSSL$(bits)_ROOT) = _ {
			return ;
		}

		if test in $(OPTIONS) {
			return true ;
		}

		C.Defines $(TARGET) : USE_SSLEAY ;

		C.IncludeDirectories $(TARGET) : $(OPENSSL$(bits)_ROOT)/include $(OPENSSL$(bits)_ROOT)/include/openssl ;

		if link in $(OPTIONS) {
			C.LinkDirectories $(TARGET) : $(OPENSSL$(bits)_ROOT)/lib/VC/static ;

			#C.LinkPrebuiltLibraries : libeay32 ssleay32 ;
			C.LinkPrebuiltLibraries $(TARGET) : libeay32MT ssleay32MT advapi32 gdi32 user32 ;

			C.LinkPrebuiltLibraries $(TARGET) : ws2_32 ;
		}
	} else {
		local bits = 32 ;
		if $(PLATFORM) in linux64 macosxx64 {
			bits = 64 ;
		}

		if ! $(OPENSSL$(bits)_ROOT) {
			local PATHS =
				/usr
			;

			local ssl.h = [ Glob $(PATHS)/include/openssl : ssl.h ] ;
			if $(ssl.h) {
				OPENSSL$(bits)_ROOT = [ Match (.+)/include/openssl/ : $(ssl.h[1]) ] ;
			} else {
				OPENSSL$(bits)_ROOT = _ ;
			}
		}

		if $(OPENSSL$(bits)_ROOT) = _ {
			return ;
		}

		if test in $(OPTIONS) {
			return true ;
		}

		C.Defines $(TARGET) : USE_SSLEAY ;

		if link in $(OPTIONS) {
			C.LinkPrebuiltLibraries $(TARGET) : crypto ;
		}
	}

	return true ;
}
