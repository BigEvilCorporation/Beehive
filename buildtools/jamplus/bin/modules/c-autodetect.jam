IncludeModule c ;

VALID_CONFIGS ?= release releaseltcg debug ;

CONFIG ?= $(VALID_CONFIGS[1]) ;

switch $(OS)
{
	case NT :
#		VALID_PLATFORMS ?= win32 win64 ;
		VALID_PLATFORMS ?= win32 ;

	case MACOSX :
#		VALID_PLATFORMS ?= macosx iphone iphonesimulator ;
		VALID_PLATFORMS ?= macosx32 macosx64 ;

	case LINUX :
		VALID_PLATFORMS ?= linux32 ;

		PLATFORM ?= linux32 ;
}

if $(PLATFORM) = "" { PLATFORM = ; }
PLATFORM ?= $(VALID_PLATFORMS[1]) ;

rule C.ToolchainSpecKeys TOOLCHAIN_SPEC_KEYS {
	local configKey ;
	local configIndex = 1 ;
	for configKey in $(TOOLCHAIN_SPEC_KEYS:Z=$(C.ACTIVE_TOOLCHAIN)) {
		$(configKey) = ;
		$(configKey) on $(C.ACTIVE_TOOLCHAIN) = ;
		configIndex = [ Math $(configIndex) + 1 ] ;
	}

	TOOLCHAIN_SPEC_KEYS ?= $(TOOLCHAIN_SPEC_KEYS:Z=$(C.ACTIVE_TOOLCHAIN)) ;
	TOOLCHAIN_SPEC_KEYS ?= C.COMPILER ;
	TOOLCHAIN_SPEC_KEYS on $(C.ACTIVE_TOOLCHAIN) = $(TOOLCHAIN_SPEC_KEYS) ;

	configIndex = 1 ;
	for configKey in $(TOOLCHAIN_SPEC_KEYS:Z=$(C.ACTIVE_TOOLCHAIN)) {
		$(configKey) = $(C.ACTIVE_CONFIG_SPEC[$(configIndex)]) ;
		$(configKey) on $(C.ACTIVE_TOOLCHAIN) = $($(configKey)) ;
		configIndex = [ Math $(configIndex) + 1 ] ;
	}
}

rule C.ToolchainHelper TOOLCHAIN_MODULE_NAME_LIST {
	local module ;
	for module in $(TOOLCHAIN_MODULE_NAME_LIST) {
		IncludeModule c-compilers/configs/_$(module) : force ;
	}
}

rule C.Toolchain TOOLCHAIN_SPEC {
	local gristedConfigSpec = $(TOOLCHAIN_SPEC:J=!) ;
	C.ACTIVE_CONFIG_SPEC = $(TOOLCHAIN_SPEC) ;
	C.ACTIVE_TOOLCHAIN = $(gristedConfigSpec) ;

	C.ActiveTarget * ;

	local save_ALL_LOCATE_TARGET = $(ALL_LOCATE_TARGET) ;
	ALL_LOCATE_TARGET = $(ALL_LOCATE_TARGET)/$(C.ACTIVE_TOOLCHAIN) ;
	if $(ALL_SUBDIR_TOKENS) {
		SubDir ;
	}
	
	if ! $(INITIALIZED:Z=$(gristedConfigSpec)) {
		INITIALIZED on $(gristedConfigSpec) = 1 ;

		if ! [ Match (\\*) : $(gristedConfigSpec)  ] {
			IncludeModule c-compilers/configs/$(TOOLCHAIN_SPEC:J=-) ;
		}	

		C.COMPILER_SUITE on $(gristedConfigSpec) = $(C.COMPILER_SUITE) ;
		C.COMPILER_SUITE_SYMBOL on $(gristedConfigSpec) = $(C.COMPILER_SUITE_SYMBOL) ;
		ALL_LOCATE_TARGET on $(C.COMPILER_SUITE_SYMBOL) = $(ALL_LOCATE_TARGET) ;
	} else {
		C.ToolchainSpecKeys ;
	}

	local compilerKey ;
	for compilerKey in $(TOOLCHAIN_COMPILER_KEYS:Z=$(C.COMPILER_SUITE_SYMBOL)) {
		$(compilerKey) = $($(compilerKey):Z=$(C.COMPILER_SUITE_SYMBOL)) ;
	}	

	ALL_LOCATE_TARGET = $(save_ALL_LOCATE_TARGET) ;

	C.COMPILER_SUITE = $(C.COMPILER_SUITE:Z=$(gristedConfigSpec)) ;
	C.COMPILER_SUITE_SYMBOL = $(C.COMPILER_SUITE_SYMBOL:Z=$(gristedConfigSpec)) ;
}

C.COMPILER ?= $(COMPILER) ;

if $(TOOLCHAIN) {
	TOOLCHAIN = [ Split $(TOOLCHAIN) : - ] ;
	C.Toolchain $(TOOLCHAIN) ;
} else {
	C.Toolchain $(PLATFORM) $(CONFIG) $(ARCHITECTURE) ;
}

COMPILER = $(C.COMPILER) ;

########################################################################
########################################################################

rule ActiveProject PROJECT
{
	ACTIVE_PROJECT = $(PROJECT) ;
}
