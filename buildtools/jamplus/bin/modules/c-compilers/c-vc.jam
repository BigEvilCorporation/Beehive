{
	SUFEXE			= .exe ;
	SUFLIB			= .lib ;
	SUFLINKLIBS		= .lib ;
	SUFMODULE		= .dll ;
	SUFOBJ			= .obj ;
	SUFSHAREDLIB	= .dll ;
	SUFRES			= .res ;

	NOARSCAN = true ;
	NOARUPDATE = true ;

	MSVC_SUBSYSTEM_WINDOWS ?= /SUBSYSTEM:WINDOWS ;
	MSVC_SUBSYSTEM_CONSOLE ?= /SUBSYSTEM:CONSOLE ;
}

IncludeModule c/win32resource ;

if ! $(TARGETINFO_LOCATE) {

rule C.FDefines { return /D$(<) ; }
rule C.FIncludes { return /I"\"$(<)\"" ; }
rule C.FLibraryPaths { return \"/LIBPATH:$(<)\" ; } #"


rule C._C++Exceptions
{
	FLAGS_TO_REMOVE.$(THE_PLATFORM).$(THE_CONFIG) on $(TARGET) += /EHa /EHsc ;

	if ! $(TYPE)  ||  $(TYPE) = false
	{
		FLAGS_TO_ADD.$(THE_PLATFORM).$(THE_CONFIG) on $(TARGET) -= /EHa /EHsc ;
	}
	else if $(TYPE) = true
	{
		FLAGS_TO_ADD.$(THE_PLATFORM).$(THE_CONFIG) on $(TARGET) += /EHsc ;
	}
}


rule C._LinkPrebuiltLibraries
{
}


rule C._RuntimeTypeHelper
{
	if ! $(TYPE)  ||  $(TYPE) = dynamic
	{
		FLAGS_TO_REMOVE.$(THE_PLATFORM).debug on $(TARGET) -= /MDd ;
		FLAGS_TO_REMOVE.$(THE_PLATFORM).release on $(TARGET) -= /MD ;
		FLAGS_TO_REMOVE.$(THE_PLATFORM).releaseltcg on $(TARGET) -= /MD ;
		FLAGS_TO_REMOVE.$(THE_PLATFORM).debug on $(TARGET) += /MTd ;
		FLAGS_TO_REMOVE.$(THE_PLATFORM).release on $(TARGET) += /MT ;
		FLAGS_TO_REMOVE.$(THE_PLATFORM).releaseltcg on $(TARGET) += /MT ;

		FLAGS_TO_ADD.$(THE_PLATFORM).debug on $(TARGET) += /MDd ;
		FLAGS_TO_ADD.$(THE_PLATFORM).release on $(TARGET) += /MD ;
		FLAGS_TO_ADD.$(THE_PLATFORM).releaseltcg on $(TARGET) += /MD ;
	}
	else if $(TYPE) = static
	{
		FLAGS_TO_REMOVE.$(THE_PLATFORM).debug on $(TARGET) -= /MTd ;
		FLAGS_TO_REMOVE.$(THE_PLATFORM).release on $(TARGET) -= /MT ;
		FLAGS_TO_REMOVE.$(THE_PLATFORM).releaseltcg on $(TARGET) -= /MT ;
		FLAGS_TO_REMOVE.$(THE_PLATFORM).debug on $(TARGET) += /MDd ;
		FLAGS_TO_REMOVE.$(THE_PLATFORM).release on $(TARGET) += /MD ;
		FLAGS_TO_REMOVE.$(THE_PLATFORM).releaseltcg on $(TARGET) += /MD ;

		FLAGS_TO_ADD.$(THE_PLATFORM).debug on $(TARGET) += /MTd ;
		FLAGS_TO_ADD.$(THE_PLATFORM).release on $(TARGET) += /MT ;
		FLAGS_TO_ADD.$(THE_PLATFORM).releaseltcg on $(TARGET) += /MT ;
	}
}

actions response C.ManifestToRC
{
	^^($(1)|$(CONTENTS)) ;
}

rule C._ManifestHelper TARGET : MANIFEST : MANIFEST_TYPE
{
	MANIFEST_TYPE ?= 1 ;
	local gristedManifest = [ C.TargetGrist $(TARGET) : $(MANIFEST) ] ;
	local manifestRC = $(gristedManifest:S=.manifest.rc) ;
	
	# This won't handle cases where $(manifestRC) contains a path, e.g. <clonewars>pc/filename.manifest.rc
	# See https://github.com/Scraft/jamplus/commit/124bf2136b9843b8fd7e98d734d09110e04f5566 for example of same problem when building resources.
	#MakeLocate $(manifestRC) : $(LOCATE_SOURCE) ;

	# Use this instead, again the above URL shows another example of this in action...
    MakeLocate $(manifestRC) : $(manifestRC:DR=$(LOCATE_SOURCE)) ;
    BINDING on $(manifestRC) = $(manifestRC:BS) ;

	SearchSource $(gristedManifest) ;
	Depends $(manifestRC) : $(gristedManifest) ;
	CONTENTS on $(manifestRC) = "$(MANIFEST_TYPE) 24 $(gristedManifest:TC/)" ;
	C.ManifestToRC $(manifestRC) : $(gristedManifest) ;
	
	return [ C.ResourceCompiler $(TARGET) : $(manifestRC) ] ;
}

if $(COMPILER.$(PLATFORM)) in vc6 vs2002 vs2003
{

actions response C.Link
{
	set PATH=$(MSVCBIN);$(MSVCNT_BIN_PATH:J=;);$(LINK_PATHS:E);%PATH%
	SET INCLUDE=$(C.STDHDRS:\\J=;)
	"$(C.LINK:\\)" /nologo @@($(LINKFLAGS) $(>) $(NEEDLIBS:T) $(LINKLIBS:CT)) /out:$(<[1])
}

} else {

actions response C.Link
{
	set PATH=$(MSVCBIN);$(MSVCNT_BIN_PATH:J=;);$(LINK_PATHS:E);%PATH%
	SET INCLUDE=$(C.STDHDRS:\\J=;)
	"$(C.LINK:\\)" /nologo @@($(LINKFLAGS) $(>) $(NEEDLIBS:T) $(LINKLIBS:CT)) /out:$(<[1])
}

actions response C.DebugLinkWithManifest
{
	REM http://msdn.microsoft.com/en-us/library/ms235591%28VS.80%29.aspx
	set PATH=$(MSVCBIN);$(MSVCNT_BIN_PATH:J=;);$(LINK_PATHS:E);%PATH%
	SET INCLUDE=$(C.STDHDRS:\\J=;)
	"$(C.LINK:\\)" /nologo @@($(LINKFLAGS) $(>) $(NEEDLIBS:T) $(LINKLIBS:CT)) /out:$(<[1])
	if exist $(MANIFEST).intermediate.manifest "$(C.MT:\\)" -nologo -notify_update -manifest $(MANIFEST).intermediate.manifest -out:$(MANIFEST).embed.manifest &
	if "%ERRORLEVEL%" == "1090650113" echo $(MANIFEST_TYPE) 24 "$(MANIFEST).embed.manifest" > "$(MANIFEST).embed.rc" &
	"$(C.RC:\\)" $(C.RC-NOLOGO) /fo $(MANIFEST).embed.res $(MANIFEST).embed.rc &
	"$(C.LINK:\\)" /nologo @@($(LINKFLAGS) $(>) $(NEEDLIBS:TC) $(LINKLIBS:CT)) /out:$(<[1])
}

actions response C.LinkWithManifest
{
	set PATH=$(MSVCBIN);$(MSVCNT_BIN_PATH:J=;);$(LINK_PATHS:E);%PATH%
	SET INCLUDE=$(C.STDHDRS:\\J=;)
	"$(C.LINK:\\)" /nologo @@($(LINKFLAGS) $(>) $(NEEDLIBS:TC) $(LINKLIBS:CT)) /out:$(<[1])
	"$(C.MT:\\)" -nologo -manifest $(MANIFEST).intermediate.manifest -outputresource:$(<[1]);$(MANIFEST_TYPE)
}

}


actions updated response C.CC
{
	PATH=$(MSVCNT_BIN_PATH:J=;);%PATH%
	SET INCLUDE=$(C.STDHDRS:\\J=;)
	$(C.CC:\\C) /nologo @@($(MFLAGS)) $(>:C)
}


actions updated response C.C++
{
	PATH=$(MSVCNT_BIN_PATH:J=;);%PATH%
	SET INCLUDE=$(C.STDHDRS:\\J=;)
	$(C.C++:\\C) /nologo @@($(MFLAGS)) $(>:C)
}


actions together response C.Archive
{
	PATH=$(MSVCNT_BIN_PATH:J=;);%PATH%
	$(C.AR:C) /nologo $(LIBFLAGS) @@($(>:\\C)) /out:$(<:C)
}


actions RegSvr32
{
	regsvr32 /s /c $(1:C)
}


actions existing UnRegSvr32
{
	regsvr32 /s /u $(2:C)
}

########################################################################
########################################################################

rule C._writeManifest TARGET : _t
{
	TARGET = [ _retrieveActiveTargetName $(TARGET) ] ;
	local grist = $(TARGET) ;
 
	local tempIntermediateManifest = @($(_t[1]).intermediate.manifest:G=$(grist)) ;
	MakeLocate $(tempIntermediateManifest) : $(LOCATE_TARGET) ;
	Clean clean:$(TARGET) : $(tempIntermediateManifest) ;

	if $(CONFIG) = debug
	{
		local tempEmbeddedManifest = @($(_t[1]).embed.manifest:G=$(grist)) ;
		MakeLocate $(tempEmbeddedManifest) : $(LOCATE_TARGET) ;
		CONTENTS on $(tempEmbeddedManifest) =
"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>
<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
</assembly>
" ;
		WriteFile $(tempEmbeddedManifest) ;
		Clean clean:$(TARGET) : $(tempEmbeddedManifest) ;

		local tempEmbeddedRc = @($(_t[1]).embed.rc:G=$(grist)) ;
		Depends $(tempEmbeddedRc) : $(tempEmbeddedManifest) ;
		MakeLocate $(tempEmbeddedRc) : $(LOCATE_TARGET) ;
		CONTENTS on $(tempEmbeddedRc) =
			"$(MANIFEST_TYPE) /* CREATEPROCESS_MANIFEST_RESOURCE_ID */ 24 /* RT_MANIFEST */ \"$(LOCATE_TARGET)/$(_t[1]:G=).embed.manifest\"" ;
		WriteFile $(tempEmbeddedRc) ;
		Clean clean:$(TARGET) : $(tempEmbeddedRc) ;
		Depends $(tempEmbeddedRc) : $(tempEmbeddedManifest) ;

		local tempEmbeddedRes = [ C.ResourceCompiler $(TARGET) : $(tempEmbeddedRc) : quiet ] ;
		_s += $(tempEmbeddedRes) ;

		Depends $(_t[1]) : $(tempIntermediateManifest) $(tempEmbeddedRes) ;
		if $(_t[2])
		{
			Includes $(_t[2]) : $(tempIntermediateManifest) $(tempEmbeddedRes) ;
		}
	}
}

rule C._setManifestType _t : MANIFEST_TYPE
{
	MANIFEST_TYPE on $(_t) = $(MANIFEST_TYPE) ;
}

rule C._linkManifest _t
{
	MANIFEST on $(_t) = "$(LOCATE_TARGET)/$(_t[1]:G=)" ;
}

rule C.DefFile TARGET : SOURCES
{
	TARGET = [ _retrieveActiveTargetName $(TARGET) ] ;
	local grist = $(TARGET) ;
	SOURCES = $(SOURCES:G=$(grist)) ;
	SEARCH on $(SOURCES) = $(SEARCH_SOURCE) ;
	Depends $(TARGET) : $(SOURCES) ;
	C.LinkFlags $(TARGET) : /DEF:"$(SOURCES:T)" ;
}


actions existing quietly DeletePCHFile
{
$(RM) $(>:\\C)
}

rule C._MultiCppCompile_PreCompile
{
	if ! $(PLATFORM) in win32 win64 {
		OPTIONS += nomanifest ;
	}

	_VCPDB = vc ;

	local vcidb = $(_VCPDB:G=$(grist):S=.idb) ;
	_VCPDB = $(_VCPDB:G=$(grist):S=.pdb) ;
	MakeLocate $(vcidb) $(_VCPDB) : $(LOCATE_TARGET) ;

	Clean clean:$(TARGET) : $(_VCPDB) $(vcidb) ;

	if $(__MultiCppCompile_OutputAsTree) = 0 {
		local combinedLocateTarget = [ FDirName $(LOCATE_TARGET) ] ;
		_postmflags = "/c /Fo\"$(combinedLocateTarget:\\)\\\\\" /Fd\"$(_VCPDB:T)\"" ;
	}
}

rule C._MultiCppCompile_SetupFlags
{
	if $(postREFERENCEDIRECTORIES[1]) {
		_flags += $(postREFERENCEDIRECTORIES) ;
	}

	local forceIncludeHeader ;
	if $(_pch[2]) && ! $(_nopch) {
		forceIncludeHeader = $(_pch[2]:G=$(grist)|force) ;
		BINDING on $(forceIncludeHeader) = $(_pch[3]) ;
		SEARCH on $(forceIncludeHeader) = $(_hdrs) ;
		objectForceIncludes = $(forceIncludeHeader) $(objectForceIncludes) ;
	}

	if $(_pch[4]) {
		# add extra flags to enable pch creation
		local _pchFilename = $(_pch[3]:LBS).pch ;
		local _pchDiskFilename = [ FDirName $(LOCATE_TARGET) $(_pchFilename:BS) ] ;
		_flags += /Fp\"$(_pchDiskFilename:\\)\" /Yc\"$(_pch[2])\" /Yl\"__jp__$(TARGET)\" ;
		# mark that it will be created by compilation through srcref
		_pchFilename = $(_pchFilename:G=$(grist)) ;
		BINDING on $(_pchFilename) = $(_pchFilename:BS) ;
		MakeLocate $(_pchFilename) : $(LOCATE_TARGET) ;
		Depends $(_pchFilename) : $(_src) ;
		Clean clean:$(TARGET) : $(_pchFilename) ;
		DeletePCHFile $(_pchFilename) : $(_pchFilename) ;

	# if the source should use pch
	} else if $(_pch[2]) && ! $(_nopch) {
		# add extra flags to enable pch loading
		local _pchFilename = $(_pch[3]:LBS).pch ;
		local _pchDiskFilename = [ FDirName $(LOCATE_TARGET) $(_pchFilename:BS) ] ;
		_flags += /Fp\"$(_pchDiskFilename:\\)\" /Yu\"$(_pch[2])\" ;
		# mark that compilation will depend on it
		_pchFilename = $(_pchFilename:G=$(grist)) ;
		Includes $(_src) : $(_pchFilename) ;
	}

	if $(objectForceIncludes[1]) {
		SEARCH on $(objectForceIncludes) = $(_hdrs) ;
		_flags += "/FI\"$(objectForceIncludes:G=)\"" ;
	}

	# bind flags, defines and includes to the target
	_flags += $(_postmflags) ;
}

rule C._MultiCppCompile_PchDeps
{
	if $(_pch1[4]) {
		local _pchFilename = $(_pch1[3]:LBS).pch ;
		_pchFilename = $(_pchFilename:G=$(grist)) ;
		Depends $(objects) : $(_pchFilename) ;
		# add that pch as output
		objects += $(_pchFilename) ;
	}
}

rule C._MultiCppCompile_PostCompile
{
	if $(COMPILER.$(PLATFORM)) in vc6 vs2003 vs2005 vs2008 vs2010 {
		# If Incredibuild is enabled, we do not need the semaphore as Incredibuild does something magic to get around the problem.
		if $(INCREDIBUILD) != "on" {
#			SEMAPHORE on $(objects) = $(_VCPDB) ;
		}
	}
}


rule C._ApplicationFromObjects_Setup
{
	if $(COMPILER.$(PLATFORM)) in vs2005 vs2008 vs2010  &&  ! ( nomanifest in $(OPTIONS) ) {
		OPTIONS += manifest ;
	}

	if $(COMPILER.$(PLATFORM)) in vc6 vs2003 vs2005 vs2008 vs2010  &&  ! ( windows in $(OPTIONS) ) {
		OPTIONS += console ;
	}
}

rule C._ApplicationFromObjects_CleanIntermediates
{
	# Clean the .pdb (etc) files.
	local sufs = .pdb .map .lib .exp .ilk ;
	local zap = $(_t:S=$(sufs)) $(_t).manifest ;
	MakeLocate $(zap) : $(outputPath) ;
	Clean clean:$(TARGET) : $(zap) ;

	Depends $(zap) : $(_linkTargets) ;
}


rule C._ApplicationFromObjects_LinkFlags
{
	if windows in $(OPTIONS) {
		linkFlags += $(MSVC_SUBSYSTEM_WINDOWS) ;
	} else if console in $(OPTIONS) {
		linkFlags += $(MSVC_SUBSYSTEM_CONSOLE) ;
	}
	
	intermediateManifestPath = $(LOCATE_TARGET)/$(_t:G=).intermediate.manifest ;
	
	if manifest in $(OPTIONS) {
		on $(TARGET) if $(MANIFEST_PATH) {
			linkFlags += /MANIFEST:NO ;
		} else {
			C._writeManifest $(TARGET) : $(_t) ;
			linkFlags += /MANIFEST /MANIFESTFILE:$(intermediateManifestPath) ;
			
			if $(COMPILER.$(PLATFORM)) != vc6 {
				if $(CONFIG) in debug {
					linkRule = C.DebugLinkWithManifest ;
				} else {
					linkRule = C.LinkWithManifest ;
				}
			}
		}
		
		C._linkManifest $(_t) ;
		C._setManifestType $(_t) : 1 ;
	}
}


rule C._ApplicationFromObjects_PostBuild
{
}


rule C._SharedLibraryFromObjects_Setup
{
	if $(COMPILER.$(PLATFORM)) in vs2005 vs2008 vs2010  &&  ! ( nomanifest in $(OPTIONS) ) {
		OPTIONS += manifest ;
	}
}

rule C._SharedLibraryFromObjects_ExportLib
{
	BINDING on $(_tlib) = [ C._retrieveOutputName $(TARGET) : SUFLIB ] ;
	Depends $(TARGET) : $(_tlib) ;
	Depends $(_tlib) : $(_t) ;
	MightNotUpdate $(_tlib) ;
	_linkTargets += $(_tlib) ;
}

rule C._SharedLibraryFromObjects_UnRegServer
{
	if regserver in $(OPTIONS) {
		regserver = true ;

		local unregserver = clean:$(TARGET):unregserver ;
		Depends clean:$(TARGET) : $(unregserver) ;
		NotFile $(unregserver) ;
		Always $(unregserver) ;
		UnRegSvr32 clean:$(TARGET):unregserver : $(_linkTargets[1]) ;
	}
}

rule C._SharedLibraryFromObjects_CleanIntermediates
{
	# Clean the .pdb (etc) files.
	local sufs = .pdb .map .exp .ilk ;
	local zap = $(_t:S=$(sufs)) $(_t).manifest ;
	MakeLocate $(zap) : $(outputPath) ;
	Clean clean:$(TARGET) : $(zap) ;

	Depends $(zap) : $(_linkTargets) ;
}

rule C._SharedLibraryFromObjects_LinkFlags
{
	if ! ( nodefaults in $(OPTIONS) ) {
		if windows in $(OPTIONS) {
			linkFlags += $(MSVC_SUBSYSTEM_WINDOWS) ;
		} else {
			linkFlags += $(MSVC_SUBSYSTEM_CONSOLE) ;
		}
	}
	linkFlags += /DLL ;

	if ( nomanifest in $(OPTIONS) ) {
		linkFlags -= /INCREMENTAL ;
	} else if manifest in $(OPTIONS) {		
		C._writeManifest $(TARGET) : $(_linkTargets) ;
		C._setManifestType $(_t) : 2 ;
		C._linkManifest $(_linkTargets) ;
		linkFlags += /MANIFEST /MANIFESTFILE:$(LOCATE_TARGET)/$(_t:G=).intermediate.manifest ;
	}

	if $(COMPILER.$(PLATFORM)) != vc6 {
		if manifest in $(OPTIONS) {
			if $(CONFIG) = debug {
				linkRule = C.DebugLinkWithManifest ;
			} else {
				linkRule = C.LinkWithManifest ;
			}
		}
	}
}


rule C._SharedLibraryFromObjects_RegServer
{
	if $(regserver) {
		RegSvr32 $(_linkTargets[1]) ;
	}
}

} else {  # TARGETINFO_LOCATE

rule C.DefFile TARGET : SOURCES
{
}

} # TARGETINFO_LOCATE

C.BUILD_EXTENSIONS = $(SUFOBJ) .res ;
C.AddBuildExtensions CC : .c .s : C.CC : $(SUFOBJ) "" : 1 1 0 : 1 ;
C.AddBuildExtensions C++ : .cc .cpp .cxx : C.C++ : $(SUFOBJ) "" : 1 0 1 : 1 ;

C.CFlags * : /TC : * : * ;
C.C++Flags * : /TP : * : * ;

if $(COMPILER.$(PLATFORM)) != vc6 {
	IncludeModule c-compilers/c-vc-crt-defines ;
}
