IncludeModule c-compilers/c-gcc-shared ;

{
	switch $(OS) {
		case CYGWIN :
			Defines * : __cygwin__ ;
			C.CC		?= gcc ;
			C.C++		?= g++ ;
			JAMSHELL	?= sh -c ;
			C.RANLIB	?= "" ;
			SUFEXE		= .exe ;
	}
}

if ! $(TARGETINFO_LOCATE) {

rule C.gcc.FDefines { return -D$(<) ; }
rule C.gcc.FIncludes { return -I$(<) ; }
rule C.gcc.FLibraryPaths { return -L$(<) ; }


rule C.gcc._LinkPrebuiltLibraries {
	C.gcc-shared._LinkPrebuiltLibraries ;
}


actions updated together piecemeal C.gcc.Archive {
	"$(C.AR)" $(LIBFLAGS) $(<:C) $(>:C)
}


actions updated together piecemeal C.gcc.Archive2 {
	"$(C.AR)" $(LIBFLAGS) -static -o $(<:C) $(>:C)
}


actions C.gcc.Link {
	"$(C.LINK)" -o $(<[1]:C) $(>:C) $(NEEDLIBS:TC) $(LINKLIBS:TC) $(LINKFLAGS)
}


actions together C.gcc.Ranlib {
	"$(C.RANLIB)" $(<:C)
}


#
# NOARUPDATE - can't update an archive
#

if $(NOARUPDATE) {
	actions C.gcc.Archive {
		"$(C.AR)" $(LIBFLAGS) $(<:C) $(>:C)
	}

	actions C.gcc.Archive2 {
		"$(C.AR)" -static $(LIBFLAGS) -o $(<:C) $(>:C)
	}
}


actions updated response C.gcc.CC {
	"$(C.CC)" -c $(MFLAGS) $(>:C)
}


actions updated response C.gcc.C++ {
	"$(C.C++)" -c $(MFLAGS) $(>:C)
}


actions updated response C.gcc.PCH {
	"$(C.C++)" -c $(MFLAGS) $(>:C)
}


rule C.gcc._C++Exceptions {
	C.gcc-shared._C++Exceptions ;
}


rule C.gcc._RuntimeTypeHelper {
	C.gcc-shared._RuntimeTypeHelper ;
}


rule C.gcc._MultiCppCompile_SetupFlags {
	C.gcc-shared._MultiCppCompile_SetupFlags ;
}


rule C.gcc._SharedLibraryFromObjects_ExportLib {
	C.gcc-shared._SharedLibraryFromObjects_ExportLib ;
}


rule C.gcc._SharedLibraryFromObjects_LinkFlags {
	C.gcc-shared._SharedLibraryFromObjects_LinkFlags ;
}

} # TARGETINFO_LOCATE

