IncludeModule c-compilers/c-gcc-shared ;

if ! $(TARGETINFO_LOCATE) {

rule C.clang.FDefines { return -D$(<) ; }
rule C.clang.FIncludes { return -I$(<) ; }
rule C.clang.FLibraryPaths { return -L$(<) ; }


rule C.clang._LinkPrebuiltLibraries {
	C.gcc-shared._LinkPrebuiltLibraries ;
}


actions updated together piecemeal C.clang.Archive {
	"$(C.AR)" -static $(LIBFLAGS) -o $(<:C) $(>:C)
}


actions updated together piecemeal C.clang.Archive2 {
	"$(C.AR)" -static $(LIBFLAGS) -o $(<:C) $(>:C)
}


actions C.clang.Link {
	"$(C.LINK)" $(LINKFLAGS) -o $(<[1]:C) $(>:C) $(NEEDLIBS:TC) $(LINKLIBS:TC)
}


actions updated response C.clang.CC {
	"$(C.CC)" -c $(MFLAGS) $(>:C)
}


actions updated response C.clang.C++ {
	"$(C.C++)" -c $(MFLAGS) $(>:C)
}


actions updated response C.clang.PCH {
	"$(C.C++)" -c $(MFLAGS) $(>:C)
}


rule C.clang._C++Exceptions {
	C.gcc-shared._C++Exceptions ;
}


rule C.clang._RuntimeTypeHelper {
	C.gcc-shared._RuntimeTypeHelper ;
}


rule C.clang._MultiCppCompile_SetupFlags {
	C.gcc-shared._MultiCppCompile_SetupFlags ;
}


rule C.clang._SharedLibraryFromObjects_ExportLib {
	C.gcc-shared._SharedLibraryFromObjects_ExportLib ;
}


rule C.clang._SharedLibraryFromObjects_LinkFlags {
	C.gcc-shared._SharedLibraryFromObjects_LinkFlags ;
}

} # TARGETINFO_LOCATE

