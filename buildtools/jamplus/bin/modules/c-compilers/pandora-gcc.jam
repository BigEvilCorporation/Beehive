######################################################################################################################

C.AR			?= "$(CODESOURCERY_ROOT)\\bin\\arm-none-linux-gnueabi-ar.exe" ru ;
C.CC			?= "$(CODESOURCERY_ROOT)\\bin\\arm-none-linux-gnueabi-gcc.exe" ;
C.C++			?= "$(CODESOURCERY_ROOT)\\bin\\arm-none-linux-gnueabi-g++.exe" ;
C.LINK			?= "$(CODESOURCERY_ROOT)\\bin\\arm-none-linux-gnueabi-g++.exe" ;
C.RANLIB		?= "$(CODESOURCERY_ROOT)\\bin\\arm-none-linux-gnueabi-ranlib.exe" ;

######################################################################################################################
# Our 'exe' is actually a shared lib, so make extension .so file.
SUFEXE		= "" ;
SUFMODULE	= .so ;

######################################################################################################################

rule C.FDefines { return -D$(<) ; }
rule C.FIncludes { return -I$(<) ; }
rule C.FLibraryPaths { return -Wl,-rpath=$(<) -L$(<) ; }

######################################################################################################################

COMPILE_FLAGS = 
	-fsigned-char 
	-mcpu=cortex-a8
	-mfpu=neon
	-ftree-vectorize
	-mfloat-abi=softfp
	-ffast-math
	-fsingle-precision-constant 
	-Wno-deprecated
	-Wno-psabi
	;
	
COMPILE_FLAGS_DEBUG =
	-g
	-O0
	;
	
COMPILE_FLAGS_NON_DEBUG =
	-fomit-frame-pointer 
	-O3
	-g
	;

######################################################################################################################

C.CFlags * : 
	$(COMPILE_FLAGS)
	;
	
C.CFlags * :
	$(COMPILE_FLAGS_DEBUG)
: debug ;
	
C.CFlags * :
	$(COMPILE_FLAGS_NON_DEBUG)
: release ;

######################################################################################################################
# NDK doesn't support RTTI or exceptions - Android build system adds these compile flags when building C++ code.

C.C++Flags * : 
	$(COMPILE_FLAGS)
	-fno-exceptions
	-fno-rtti
	;
	
C.C++Flags * :
	$(COMPILE_FLAGS_DEBUG)
: debug ;
	
C.C++Flags * :
	$(COMPILE_FLAGS_NON_DEBUG)
: release ;

######################################################################################################################

C.Defines * :
	__ARM_ARCH_5__ 
	__ARM_ARCH_5T__ 
	__ARM_ARCH_5E__ 
	__ARM_ARCH_5TE__ 
	__NEW__ 
	__SGI_STL_INTERNAL_PAIR_H 
	_PANDORA
	TCHAR=char 
	;
	
C.Defines * : _DEBUG : debug ;
C.Defines * : NDEBUG : release ;

######################################################################################################################
# Another flag, -Wl,-soname is set when linking as it contains the link target name that isn't accessible yet.

C.LinkFlags * :
	-Wl,--whole-archive 
	-Wl,--no-whole-archive
	-Wl,--no-undefined
	-g
	-lstdc++
	-lrt
	-Wl,-rpath=libs
	;

######################################################################################################################

C.LinkDirectories * :
	;

######################################################################################################################
# TODO : Currently links against GLES, dl (for opening the GLES dynamic library) and log (for log messages), as well
# as the real basics libc, libstdc++, libm, libgcc. Also links against stlport from Ndk Wrappers.

C.LinkPrebuiltLibraries * :
	;

######################################################################################################################

VSPLATFORMMAP.pandora = "Pandora" ;

######################################################################################################################
# Using custom C.Link as we need to specify the exectuable name as part of the flags, and using custom rules for
# everything else as we need to do some cygwin setup first. Ideally we'd share the actions in g-gcc and just do our
# cygwin setup first, but I'm not sure if that is possible to do right now.

# Tell cygwin not to moan about DOS filenames, and put cygwin's bin folder on the path so it can find cygwin1.dll

actions response C.Link
{
	"$(C.LINK)" -Wl,-soname,$(<[1]:CBS) @@($(LINKFLAGS) $(>:C) $(NEEDLIBS:T) $(LINKLIBS)) -o $(<[1]:C)
}

actions updated together piecemeal response C.Archive
{
	"$(C.AR)" @@($(LIBFLAGS) $(<:C) $(>:C))
}

actions together C.Ranlib
{
	"$(C.RANLIB)" $(<:C)
}

actions response C.Archive
{
	"$(C.AR)" $(LIBFLAGS) $(<:C) $(>:C)
}

actions updated response C.CC
{
	CD /D $(<[1]:CD\\)
	"$(C.CC)" @@(-c $(MFLAGS)) $(>:C)
}

actions updated response C.C++
{
	CD /D $(<[1]:CD\\)
	"$(C.C++)" @@(-c $(MFLAGS)) $(>:C)
}

actions updated response C.PCH
{
	"$(C.C++)" @@(-c $(MFLAGS)) $(>:C)
}

######################################################################################################################
